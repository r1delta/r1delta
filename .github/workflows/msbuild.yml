# .github/workflows/msbuild.yml
name: Build and Release Project

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]
  workflow_dispatch: # Optional: Allows manual triggering

env:
  # Use paths with forward slashes for better consistency in YAML
  SOLUTION_FILE_PATH: .
  BUILD_PATH: ${{ github.workspace }}/build
  OUTPUT_PATH: ${{ github.workspace }}/output
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg_cache
  BUILD_CONFIGURATION: Release
  # --- Squirrel Env Vars ---
  NUSPEC_FILE: R1Delta.nuspec # Name of your nuspec file
  PACKAGE_NAME: R1Delta      # MUST match <id> in nuspec and SquirrelAppName

permissions:
  contents: write # Needed to create releases and upload assets

jobs:
  build:
    runs-on: windows-latest
    outputs:
      # Pass the path to the directory containing the prepared files
      artifact_path: ${{ steps.format_files.outputs.output_dir }}
      # Pass the name used for the artifact upload/download
      artifact_name: delta # Keep this simple and static
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for versioning if needed later

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2

      # --- Create VCPKG Cache Directory ---
      - name: Prepare VCPKG Cache Directory
        run: |
          # Create the cache directory
          New-Item -ItemType Directory -Force -Path "${{ env.VCPKG_DEFAULT_BINARY_CACHE }}"
          Write-Host "Created VCPKG cache directory at ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}"
          
          # Verify the directory exists
          if (Test-Path -Path "${{ env.VCPKG_DEFAULT_BINARY_CACHE }}") {
            Write-Host "VCPKG cache directory exists at ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}"
          } else {
            Write-Error "Failed to create VCPKG cache directory at ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}"
            exit 1
          }
        shell: pwsh

      # --- VCPKG Cache & Restore ---
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: cache-vcpkg-archives
        id: cache-vcpkg-archives
        uses: actions/cache@v4
        with:
          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
          key: ${{ runner.os }}-windows-vcpkg-${{ hashFiles('**/vcpkg.json', '.github/workflows/**') }}
          restore-keys: |
            ${{ runner.os }}-windows-vcpkg-

      - name: vcpkg integrate install
        run: vcpkg integrate install
        shell: pwsh

      - name: Restore NuGet packages
        run: nuget restore ${{env.SOLUTION_FILE_PATH}}

      # --- Build Step ---
      - name: Build Solution
        run: >
          msbuild /m /restore
          /p:Configuration=${{env.BUILD_CONFIGURATION}}
          /p:OutDir=${{env.BUILD_PATH}}/
          /p:WarningLevel=0
          ${{env.SOLUTION_FILE_PATH}}

      # --- Checkout Core Scripts ---
      - name: Checkout Core Scripts
        uses: actions/checkout@v4
        with:
          repository: r1delta/core
          path: core

      # --- Prepare Output Directory ---
      - name: Prepare Output Directory
        id: format_files
        shell: pwsh
        run: |
          # Create directories
          $ErrorActionPreference = 'Stop' # Ensure script stops on error
          $outputPath = "${{ env.OUTPUT_PATH }}"
          $deltaPath = Join-Path -Path $outputPath -ChildPath "r1delta"
          $binDeltaPath = Join-Path -Path $deltaPath -ChildPath "bin_delta"
          
          New-Item -ItemType Directory -Force -Path $outputPath
          New-Item -ItemType Directory -Force -Path $deltaPath
          New-Item -ItemType Directory -Force -Path $binDeltaPath

          # Copy files
          Write-Host "Copying EXE files from ${{ env.BUILD_PATH }} to $outputPath"
          Copy-Item -Path "${{ env.BUILD_PATH }}/*.exe" -Destination "$outputPath/"

          Write-Host "Copying DLL files from ${{ env.BUILD_PATH }} to $binDeltaPath"
          Copy-Item -Path "${{ env.BUILD_PATH }}/*.dll" -Destination "$binDeltaPath/"

          # Copy core scripts using Robocopy
          Write-Host "Copying core scripts using Robocopy"
          $coreSourcePath = "${{ github.workspace }}/core"
          robocopy "$coreSourcePath" "$deltaPath" /E /XD .git /XF *.md
          $RoboExitCode = $LASTEXITCODE
          Write-Host "Robocopy exit code: $RoboExitCode"

          # Check Robocopy exit code (0-7 are success/no-op/files copied)
          if ($RoboExitCode -ge 8) {
              Write-Error "Robocopy failed with exit code $RoboExitCode"
              exit 1
          } else {
              Write-Host "Robocopy completed successfully."
          }

          # Output the path to the prepared directory for the artifact upload
          Write-Host "Outputting directory path: $outputPath"
          echo "output_dir=$outputPath" >> $env:GITHUB_OUTPUT

          # Explicitly exit with 0 if successful
          exit 0

      # --- Upload Artifact ---
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ steps.format_files.outputs.output_dir }}
          name: delta

  # --- Release Job ---
  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: windows-latest

    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact_name }}
          path: ${{ github.workspace }}/release_files

      - name: Setup NuGet CLI
        uses: NuGet/setup-nuget@v2
        with:
          nuget-version: 'latest'

      # --- Install Squirrel Tool via NuGet ---
      - name: Install Squirrel.Windows Tool
        id: install_squirrel
        run: |
          # Define where to install the tool package
          $squirrelToolPath = "${{ github.workspace }}/squirrel-tool"
          New-Item -ItemType Directory -Force -Path $squirrelToolPath

          # Install the specific NuGet package containing the tool
          nuget install Squirrel.Windows -OutputDirectory $squirrelToolPath -ExcludeVersion -NoCache -DirectDownload

          # Find the actual tools directory
          $squirrelExeDir = Join-Path $squirrelToolPath "Squirrel.Windows\tools"
          if (-not (Test-Path (Join-Path $squirrelExeDir "Squirrel.exe"))) {
             Write-Warning "Squirrel.exe not found in expected path: $squirrelExeDir. Searching..."
             $foundPath = Get-ChildItem -Path $squirrelToolPath -Recurse -Filter Squirrel.exe | Select-Object -First 1
             if ($foundPath) {
               $squirrelExeDir = $foundPath.DirectoryName
               Write-Host "Found Squirrel.exe in: $squirrelExeDir"
             } else {
               Write-Error "Could not locate Squirrel.exe after NuGet install."
               exit 1
             }
          }

          # Add the directory containing Squirrel.exe to the PATH for subsequent steps
          Write-Host "Adding $squirrelExeDir to PATH"
          echo "$squirrelExeDir" >> $env:GITHUB_PATH

          # Output the path for reference in other steps if needed
          echo "squirrel_exe_dir=$squirrelExeDir" >> $env:GITHUB_OUTPUT
        shell: pwsh

      # Checkout the main repository again to get the nuspec file
      - name: Checkout Nuspec File
        uses: actions/checkout@v4

      - name: Get Version from Tag
        id: get_version
        run: |
          $version = $env:GITHUB_REF -replace '^refs/tags/v', ''
          Write-Host "Extracted version: $version"
          echo "version=$version" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Prepare for NuGet Pack
        run: Copy-Item -Path "${{ env.NUSPEC_FILE }}" -Destination "${{ github.workspace }}/release_files/"
        shell: pwsh

      - name: Pack with NuGet
        working-directory: ${{ github.workspace }}/release_files
        run: |
          nuget pack ${{ env.NUSPEC_FILE }} -Version ${{ steps.get_version.outputs.version }} -OutputDirectory ${{ github.workspace }}/package_output -NoPackageAnalysis
        shell: pwsh

      - name: Create Release Output Directory
        run: mkdir ${{ github.workspace }}/squirrel_release
        shell: pwsh

      # --- Releasify Step ---
      - name: Releasify with Squirrel
        run: |
          REM Verify Squirrel is in PATH (optional debug)
          where Squirrel.exe

          REM Run the releasify command
          Squirrel --releasify "${{ github.workspace }}/package_output/${{ env.PACKAGE_NAME }}.${{ steps.get_version.outputs.version }}.nupkg" --releaseDir "${{ github.workspace }}/squirrel_release"
        shell: cmd # Squirrel often works best in cmd

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: R1Delta ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Setup.exe Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/squirrel_release/Setup.exe
          asset_name: Setup.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload RELEASES File Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/squirrel_release/RELEASES
          asset_name: RELEASES
          asset_content_type: text/plain

      - name: Upload Full Nupkg Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/squirrel_release/${{ env.PACKAGE_NAME }}-${{ steps.get_version.outputs.version }}-full.nupkg
          asset_name: ${{ env.PACKAGE_NAME }}-${{ steps.get_version.outputs.version }}-full.nupkg
          asset_content_type: application/zip
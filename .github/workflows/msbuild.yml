  # --- Release Job ---
  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: windows-latest

    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact_name }}
          path: ${{ github.workspace }}\release_files

      - name: Setup NuGet CLI
        uses: NuGet/setup-nuget@v2
        with:
          nuget-version: 'latest'

      # --- Install Squirrel Tool via NuGet ---
      - name: Install Squirrel.Windows Tool
        id: install_squirrel # Give step an ID
        run: |
          # Define where to install the tool package
          $squirrelToolPath = "${{ github.workspace }}\squirrel-tool"
          New-Item -ItemType Directory -Force -Path $squirrelToolPath

          # Install the specific NuGet package containing the tool
          # -ExcludeVersion prevents creating a versioned subfolder in OutputDirectory
          # -DirectDownload can sometimes be faster/more reliable in CI
          nuget install Squirrel.Windows -OutputDirectory $squirrelToolPath -ExcludeVersion -NoCache -DirectDownload

          # Find the actual tools directory (might vary slightly with package updates)
          # Usually it's under a 'tools' subfolder within the package contents
          $squirrelExeDir = Join-Path $squirrelToolPath "Squirrel.Windows\tools" # Common path structure
          if (-not (Test-Path (Join-Path $squirrelExeDir "Squirrel.exe"))) {
             # Fallback or alternative search if needed, adjust based on actual package structure if it changes
             Write-Warning "Squirrel.exe not found in expected path: $squirrelExeDir. Searching..."
             $foundPath = Get-ChildItem -Path $squirrelToolPath -Recurse -Filter Squirrel.exe | Select-Object -First 1
             if ($foundPath) {
               $squirrelExeDir = $foundPath.DirectoryName
               Write-Host "Found Squirrel.exe in: $squirrelExeDir"
             } else {
               Write-Error "Could not locate Squirrel.exe after NuGet install."
               exit 1
             }
          }

          # Add the directory containing Squirrel.exe to the PATH for subsequent steps
          Write-Host "Adding $squirrelExeDir to PATH"
          echo "$squirrelExeDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          # Output the path for potential future reference (optional)
          echo "squirrel_exe_dir=$squirrelExeDir" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: pwsh

      # Checkout the main repository again to get the nuspec file
      - name: Checkout Nuspec File
        uses: actions/checkout@v4

      - name: Get Version from Tag
        id: get_version
        run: |
          $version = $env:GITHUB_REF -replace '^refs/tags/v', ''
          Write-Host "Extracted version: $version"
          echo "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: pwsh

      - name: Prepare for NuGet Pack
        run: Copy-Item -Path "${{ env.NUSPEC_FILE }}" -Destination "${{ github.workspace }}\release_files\"
        shell: pwsh

      - name: Pack with NuGet
        working-directory: ${{ github.workspace }}\release_files
        run: |
          nuget pack ${{ env.NUSPEC_FILE }} -Version ${{ steps.get_version.outputs.version }} -OutputDirectory ${{ github.workspace }}\package_output -NoPackageAnalysis
        shell: pwsh

      - name: Create Release Output Directory
        run: mkdir ${{ github.workspace }}\squirrel_release
        shell: pwsh

      # --- Releasify Step ---
      # Now uses the Squirrel.exe found via NuGet and added to PATH
      - name: Releasify with Squirrel
        run: |
          REM Verify Squirrel is in PATH (optional debug)
          where Squirrel.exe

          REM Run the releasify command
          Squirrel --releasify "${{ github.workspace }}\package_output\${{ env.PACKAGE_NAME }}.${{ steps.get_version.outputs.version }}.nupkg" --releaseDir "${{ github.workspace }}\squirrel_release"
        shell: cmd # Squirrel often works best in cmd

      # ... (Keep Create GitHub Release and Upload Assets steps as they were) ...
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: R1Delta ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Setup.exe Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}\squirrel_release\Setup.exe
          asset_name: Setup.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload RELEASES File Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}\squirrel_release\RELEASES
          asset_name: RELEASES
          asset_content_type: text/plain

      - name: Upload Full Nupkg Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}\squirrel_release\${{ env.PACKAGE_NAME }}-${{ steps.get_version.outputs.version }}-full.nupkg
          asset_name: ${{ env.PACKAGE_NAME }}-${{ steps.get_version.outputs.version }}-full.nupkg
          asset_content_type: application/zip